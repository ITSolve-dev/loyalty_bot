version: '3.9'

services:
#  restart_init_service: &restart_init_service
#    restart: always
#    init: true
#    image: bot_bot:latest

  bot:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    <<: *restart_init_service
    init: true
    image: ${DOCKER_USERNAME}/${PROJECT__NAME}-${PROJECT__ENV}:${PROJECT__VERSION}
    container_name: bot_${PROJECT__VERSION}
    environment:
      - ST__DB__HOST=pgbouncer
    depends_on:
      - postgres_db
    networks:
      - postgres
      - redis-network

  postgres_db:
    init: true
    image: postgres:15.3
    container_name: postgres-storage
    hostname: postgres_db
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth=md5
      POSTGRES_USER: ${ST__DB__USER}
      POSTGRES_DB: ${ST__DB__NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ST__DB__USER} -d ${ST__DB__NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    ports:
      - 54320:5432
    secrets:
      - db_password
    networks:
      - postgres

  pgadmin:
#    <<: *restart_init_service
    image: dpage/pgadmin4
    container_name: postgres-gui-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - postgres

  pgbouncer:
#    <<: *restart_init_service
    image: edoburu/pgbouncer
    container_name: pgbouncer
    hostname: pgbouncer
    environment:
      AUTH_FILE: /run/secrets/pg_bouncer_auth_file
      DB_USER: ${ST__DB__USER}
      DB_HOST: postgres_db
      DB_NAME: ${ST__DB__NAME}
      DB_PORT: 5432
      POOL_MODE: ${PB_BOUNCER__POOL_MODE}
      ADMIN_USERS: ${ST__DB__USER}
      MAX_CLIENT_CONN: ${PB_BOUNCER__MAX_CLIENT_CONN}
    networks:
      - postgres
    secrets:
      - pg_bouncer_auth_file
    expose:
      - 6432
    ports:
      - 6432:5432
    depends_on:
      - postgres_db

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 8080:3000

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  postgres_exporter:
    container_name: postgres-monitoring
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgres_db
      DATA_SOURCE_USER: ${ST__DB__USER}
      DATA_SOURCE_PASS_FILE: /run/secrets/db_password
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./deploy/pg_exporter_queries.yml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - 9187:9187
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    depends_on:
      - postgres_db
    secrets:
      - db_password
    networks:
      - postgres

  redis:
#    <<: *restart_init_service
    container_name: redis-storage
    image: redis:latest
    command: redis-server
    volumes:
      - redis:/var/lib/redis
      - redis-config:/usr/local/etc/redis/redis.conf
    expose:
      - 63790
    ports:
      - 63790:6379
    networks:
      - redis-network

  redis-commander:
#    <<: *restart_init_service
    container_name: redis-gui
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=root
    ports:
      - 8081:8081
    networks:
      - redis-network
    depends_on:
      - redis

volumes:
  postgres-db-volume:
  pgadmin-data:
  redis:
  redis-config:

networks:
  postgres:
    driver: bridge
  redis-network:
    driver: bridge

secrets:
  db_password:
    file: ./deploy/db_password.txt
  pg_bouncer_auth_file:
    file: ./deploy/pb_bouncer_auth_file.txt